https://raw.githubusercontent.com/everyleaf/el-training/master/docs/el-training.



ステップ1 CRUD機能 + テスト（システムスペック）の要件チェックリスト
Rubyは課題推奨バーションをインストールする
RubyのバージョンはGemfileに記載する
Railsは課題推奨バーションをインストールする
PostgreSQLは最新バージョンをインストールする
GitHubのリポジトリを作成する
GitHubのリポジトリにプルリクエストを作成して提出する
プロジェクトのディレクトリの直下に docs というディレクトリを作成する
アプリケーションの仕様書をdocsフォルダに入れる
ER図を作成して、docsフォルダに入れる
README.mdファイルのデフォルトの記述を消去して、markdown記法でテーブルスキーマ（モデル名、カラム名、データ型）を記載する
データベースはPostgreSQLを使用する
タスクの一覧画面、詳細画面、新規作成画面、編集画面、削除機能を作成する
データベースの制約についても忘れず設定するようにしましょう
タスクの新規作成、更新、削除後はそれぞれflashメッセージを画面に表示させる
routes.rb を編集して、http://localhost:3000/ でタスクの一覧画面が表示されるようにする
spec/spec_helper.rb 、 spec/rails_helper.rb を用意する
System Specを書く
タスクを新規作成したとき、作成したタスクが画面に表示される
一覧画面では、作成済みのタスクが表示される
任意のタスク詳細画面に遷移したとき、該当タスクの内容が表示される
Model Specを書く
タスクのタイトルが空ならバリデーションにひっかかる
タスクの詳細が空ならバリデーションにひっかかる
タスクのタイトルと詳細に内容が記載されていれば、バリデーションが通る
デバック・Rspec関係のgem以外のgemは追加していないこと
下記画像のようなruby -v、rails -v、psql --versionのコマンドをターミナルで打った時のスクリーンショットを提出する




ステップ2 基本的な各種設定 + デプロイ要件チェックリスト
Railsのi18nの仕組みを利用して、アプリケーションを国際化する
Railsのタイムゾーンをあなたの地域に設定する
tasks/indexで作成日時の降順で並び替える
作成日時の降順での並び替えのテストをSystem Specを実装する
複数のタスクを作成した場合、タスクが作成日時の降順に並んでいる
画面にバリデーションエラーのメッセージを表示する
masterブランチをHerokuにデプロイをする
Herokuへのデプロイ手順をMarkdown記法でREADME.mdに記載する
GitHubとHerokuを自動連携する
GitHubとHerokuを連携した際のスクリーンショットが提出されていること
デバッグ、rails-i18n以外のgemは追加していないこと


ステップ3 色々な入力フォーム + 要素とデザイン 要件チェックリスト
タスクに対して、終了期限が登録できる
タスク一覧画面で、タスクを終了期限でソートできる
タスクに対して、ステータス（未着手・着手中・完了）を登録できる（ステータスの入力フォームはプルダウンを使用すること）
一覧画面でタイトルのあいまい検索ができる
一覧画面でステータスの検索ができる（ステータスの検索フォームはプルダウンを使用すること）
一覧画面でタイトルとステータスの両方で絞り込み検索ができる（タイトルにのみ値が入っていた場合はタイトルのみで検索し、ステータスにのみ値が入っていた場合はステータスのみで検索すること。両方に値が入っていた場合は両方成り立つ場合（and検索）の検索ができること）
検索インデックスを貼る
【+α要件】 ある程度まとまったテストデータを用意して log/development.log を見ながら動作確認を行い、インデックスの追加により速度が改善されることを確認する
【+α要件】explainメソッドなどを使用して、データベース側でのインデックス使用状況なども見る
タスクに対して、優先順位（高中低）が登録できる
優先順位が高い順にソートできる
KaminariというGemを使って一覧画面にページネーションを追加する
Bootstrapを導入して、これまで作成したアプリにデザインを適用する
GitHub上でPRを作成してレビューしてもらいましょう。
終了期限のテストをSystem Specで実装する
タスクを新規登録するとき、終了期限も登録できる
FactoryBotを修正し、終了期限のカラムを追加すること
step1で実装した「タスクを新規作成した場合、作成したタスクが表示される」を修正し、終了期限の登録を追記する
終了期限でソートするというリンクを押すと、終了期限の降順に並び替えられたタスク一覧が表示される
ステータスのテストをSystem Specで実装する
タスクを新規登録するとき、ステータスも登録ができる
FactoryBotを修正すること
step1で実装した「タスクを新規作成した場合、作成したタスクが表示される」を修正すること
検索をした場合
タイトルで検索できる
ステータスで検索できる
タイトルとステータスの両方で検索できる
検索ロジックのModel Specを実装する
scopeメソッドでタイトルのあいまい検索ができる
scopeメソッドでステータス検索ができる
scopeメソッドでタイトルとステータスの両方が検索できる
Bootstrapを導入して、これまで作成したアプリケーションに最低限のデザインを適用する。今までの課題での成果物と同等程度のクオリティで合格とする
【+α要件】さらに自分でCSSやJavaScriptを書いて高度なデザインを適用する
Bootstrap導入後、今まで書いていたSystem Specのテストが落ちてしまったら修正する
KaminariというGemを使って一覧画面にページネーションを実装する
デバック・Kaminari・bootstrap・jquery-rails以外のgemは追加しない


ステップ4 ユーザ + 管理者 要件チェックリスト
ユーザモデルを作成する
最初のユーザをseedで作成する
ユーザとタスクを紐づける
タスク一覧画面とマイページに表示されているすべてのタスクに、作成したユーザ名を表示させること
ユーザのemailにユニーク制約をつける
関連（アソシエーションで使用するid）に対してインデックスをつける
bcrypt-ruby以外は、Gemを使わずに実装する
ログイン機能を実装する
ログインをせずにタスク一覧のページに飛ぼうとしたときは、ログインページに遷移させる
自分が作成したタスクだけを表示させる
ログアウト機能を実装する
ユーザの新規登録画面、ログイン画面、詳細・マイページ（show）画面を作成する
ユーザを新規登録（create）をしたとき、同時にログインもさせる
ログインしているときは、ユーザの新規登録画面（new画面）に行かせないようにコントローラで制御する
自分（current_user）以外のユーザのマイページ（userのshow画面）にアクセスしたらタスク一覧に遷移させる
管理画面を追加する
管理画面にはかならず /admin というURLを先頭につける
管理画面でユーザ一覧表示・作成・更新・削除ができる（管理画面のビューは、パーシャル化しなくても構わない）
ユーザを削除したら、そのユーザに紐づいているタスクを全て削除する
ユーザの一覧画面で、そのユーザに紐づいているタスクの数を表示する
N+1問題を回避するための仕組みを取り入れること
ユーザが作成したタスクの一覧を、そのユーザのマイページ（userのshow画面）で見られる
ユーザを管理ユーザと一般ユーザを区別する
管理ユーザだけがユーザ管理画面にアクセスできる
一般ユーザが管理画面にアクセスしたとき、tasks/indexに飛ばして「管理者以外はアクセスできない」旨のflashメッセージを出力する
ユーザ管理画面でロールの付与と削除ができる
管理ユーザが一人もいなくなってしまわないように、モデルのコールバックを利用して更新・削除の制御をする
テスト項目を満たすようSystem Specを書く
ユーザ登録のテスト
ユーザの新規登録ができること
ユーザがログインせずタスク一覧画面に飛ぼうとしたとき、ログイン画面に遷移すること
セッション機能のテスト
ログインができること
自分の詳細画面(マイページ)に飛べること
一般ユーザが他人の詳細画面に飛ぶとタスク一覧画面に遷移すること
ログアウトができること
管理画面のテスト
管理ユーザは管理画面にアクセスできること
一般ユーザは管理画面にアクセスできないこと
管理ユーザはユーザの新規登録ができること
管理ユーザはユーザの詳細画面にアクセスできること
管理ユーザはユーザの編集画面からユーザを編集できること
管理ユーザはユーザの削除をできること
ブランチのstep4をherokuにデプロイすること
Herokuにデプロイした際に、すでに登録されているタスクとユーザが紐づいているようにすること


ステップ5 エラーページ + ラベリング機能 要件チェックリスト
Railsが用意しているデフォルトのエラーページを、自分が作った画面にする
状況に応じて、適切にエラーページを設定する
ステータスコードの404ページと500ページの2種類の設定は必須とする
それ以外は+α要件として、つけてみたい方は実装してみること
タスクに複数のラベルをつけられる（ラベルはseedなどのマスタデータで作成する・管理する形でも構いませんし、管理画面などから作成できる形でも構わない）
ラベルは、タスクを新規登録するときに（またはタスクの編集をするときに）タスクと一緒に登録（または編集）できる
タスクの詳細画面で、そのタスクに紐づいているラベル一覧を出力する
【+α要件】ユーザが自分でラベルを作成ができる（その場合、ユーザが作成したラベルはそのユーザしか使えないように実装すること）
【+α要件】タスクを編集するとき、タスクに紐づいているラベルも一緒に編集（ラベルの付け外し）ができる
つけたラベルで検索ができる（ラベルは一つだけを選択して、そのラベルがついているタスクを検索するという形で構いません）
今回は、実装した内容を参考に必要なテスト項目を自分で考えSystem Specを書く
テストが通ったときのスクショをコメントと一緒に貼り付ける
ラベルはGemを使わず実装する
step5のブランチからHerokuのmasterにpushする
それぞれ10件以上のタスク、ユーザ、ラベルのシードデータをHerokuに反映させる
HerokuのURLを提出する
